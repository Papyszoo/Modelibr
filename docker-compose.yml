services:
    webapi:
        image: ${DOCKER_REGISTRY-}webapi
        build:
            context: .
            dockerfile: src/WebApi/Dockerfile
            args:
                APP_UID: ${HOST_UID:-1000}
                APP_GID: ${HOST_GID:-1000}
        container_name: webapi
        environment:
            - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
            - ASPNETCORE_HTTP_PORTS=${WEBAPI_HTTP_PORT}
            - ASPNETCORE_HTTPS_PORTS=${WEBAPI_HTTPS_PORT}
            - UPLOAD_STORAGE_PATH=/var/lib/modelibr/uploads
            - ConnectionStrings__Default=Host=postgres;Port=${POSTGRES_PORT};Database=Modelibr;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};
            - DisableHttpsRedirection=true
        ports:
            - "${WEBAPI_HTTP_PORT}:8080"
            - "${WEBAPI_HTTPS_PORT}:8081"

        volumes:
            # Use platform-appropriate secret/cert paths; on macOS $HOME works (APPDATA is Windows-specific)
            - ${HOME}/.microsoft/usersecrets:/home/app/.microsoft/usersecrets:ro
            - ${HOME}/.aspnet/https:/home/app/.aspnet/https:ro
            - ./data/uploads:/var/lib/modelibr/uploads
        depends_on:
            postgres:
                condition: service_healthy
        networks:
            - modelibr
    frontend:
        image: ${DOCKER_REGISTRY-}frontend
        build:
            context: ./src/frontend
            dockerfile: Dockerfile
            target: production
            args:
                VITE_API_BASE_URL: ${VITE_API_BASE_URL}
        container_name: frontend
        ports:
            - "${FRONTEND_PORT:-3000}:80"
        networks:
            - modelibr
    thumbnail-worker:
        image: ${DOCKER_REGISTRY-}thumbnail-worker
        build:
            context: ./src/worker-service
            dockerfile: Dockerfile
        container_name: thumbnail-worker
        environment:
            - WORKER_ID=${WORKER_ID:-worker-1}
            - WORKER_PORT=${WORKER_PORT:-3001}
            - API_BASE_URL=http://webapi:${WEBAPI_HTTP_PORT}
            - POLL_INTERVAL_MS=${POLL_INTERVAL_MS:-5000}
            - MAX_CONCURRENT_JOBS=${MAX_CONCURRENT_JOBS:-3}
            - RENDER_WIDTH=${RENDER_WIDTH:-256}
            - RENDER_HEIGHT=${RENDER_HEIGHT:-256}
            - RENDER_FORMAT=${RENDER_FORMAT:-png}
            - LOG_LEVEL=${LOG_LEVEL:-info}
            - NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED:-1}
            - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
        ports:
            - "${WORKER_PORT:-3001}:3001"
        depends_on:
            - webapi
        networks:
            - modelibr
        restart: unless-stopped
    postgres:
        image: postgres:16-alpine
        container_name: postgres
        environment:
            POSTGRES_DB: Modelibr
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - "${POSTGRES_PORT}:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d Modelibr"]
            interval: 15s
            timeout: 5s
            retries: 10
            start_period: 20s
        volumes:
            - postgres-data:/var/lib/postgresql/data
        networks:
            - modelibr

volumes:
    postgres-data:

networks:
    modelibr:
        driver: bridge
