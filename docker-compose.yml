services:
    webapi:
        image: ${DOCKER_REGISTRY-}webapi
        build:
            context: .
            dockerfile: src/WebApi/Dockerfile
            args:
                APP_UID: ${HOST_UID:-1000}
                APP_GID: ${HOST_GID:-1000}
        container_name: webapi
        environment:
            - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
            - ASPNETCORE_HTTP_PORTS=${WEBAPI_HTTP_PORT}
            - ASPNETCORE_HTTPS_PORTS=${WEBAPI_HTTPS_PORT}
            - UPLOAD_STORAGE_PATH=/var/lib/modelibr/uploads
            - ConnectionStrings__Default=Server=mssql,${MSSQL_PORT};Database=Modelibr;User Id=sa;Password=${SA_PASSWORD};TrustServerCertificate=true;
            - DisableHttpsRedirection=true
        ports:
            - "${WEBAPI_HTTP_PORT}:${WEBAPI_HTTP_PORT}"
            - "${WEBAPI_HTTPS_PORT}:${WEBAPI_HTTPS_PORT}"
        healthcheck:
            # Primary health check using curl
            test: ["CMD-SHELL", "curl -f http://127.0.0.1:${WEBAPI_HTTP_PORT}/health || exit 1"]
            # Alternative health check (if curl fails): ["CMD-SHELL", "/usr/local/bin/health-check.sh ${WEBAPI_HTTP_PORT}"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 60s
        volumes:
            # Use platform-appropriate secret/cert paths; on macOS $HOME works (APPDATA is Windows-specific)
            - ${HOME}/.microsoft/usersecrets:/home/app/.microsoft/usersecrets:ro
            - ${HOME}/.aspnet/https:/home/app/.aspnet/https:ro
            - ./data/uploads:/var/lib/modelibr/uploads
        depends_on:
            mssql:
                condition: service_healthy
        networks:
            - modelibr
    frontend:
        image: ${DOCKER_REGISTRY-}frontend
        build:
            context: ./src/frontend
            dockerfile: Dockerfile
            target: production
            args:
                VITE_API_BASE_URL: ${VITE_API_BASE_URL}
        container_name: frontend
        ports:
            - "${FRONTEND_PORT:-3000}:80"
        networks:
            - modelibr
    thumbnail-worker:
        image: ${DOCKER_REGISTRY-}thumbnail-worker
        build:
            context: ./src/worker-service
            dockerfile: Dockerfile
        container_name: thumbnail-worker
        environment:
            - WORKER_ID=${WORKER_ID:-worker-1}
            - WORKER_PORT=${WORKER_PORT:-3001}
            - API_BASE_URL=http://webapi:${WEBAPI_HTTP_PORT}
            - POLL_INTERVAL_MS=${POLL_INTERVAL_MS:-5000}
            - MAX_CONCURRENT_JOBS=${MAX_CONCURRENT_JOBS:-3}
            - RENDER_WIDTH=${RENDER_WIDTH:-256}
            - RENDER_HEIGHT=${RENDER_HEIGHT:-256}
            - RENDER_FORMAT=${RENDER_FORMAT:-png}
            - LOG_LEVEL=${LOG_LEVEL:-info}
            - NODE_TLS_REJECT_UNAUTHORIZED=1
        ports:
            - "${WORKER_PORT:-3001}:3001"
        depends_on:
            webapi:
                condition: service_healthy
        networks:
            - modelibr
        restart: unless-stopped
    mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        container_name: mssql
        environment:
            ACCEPT_EULA: "${ACCEPT_EULA}"
            SA_PASSWORD: "${SA_PASSWORD}"
            MSSQL_PID: "${MSSQL_PID}"
        ports:
            - "${MSSQL_PORT}:1433"
        healthcheck:
            test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P ${SA_PASSWORD} -C -Q 'SELECT 1' || exit 1"]
            interval: 15s
            timeout: 5s
            retries: 10
            start_period: 20s
        volumes:
            - mssql-data:/var/opt/mssql
        networks:
            - modelibr

volumes:
    mssql-data:

networks:
  modelibr:
    driver: bridge
